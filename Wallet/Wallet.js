const ChainUtil = require('../chain-util');
const {INITIAL_BALANCE} = require('../config');
const RT = require('./rt');

class Wallet {
    /**
     * the wallet will hold the public key
     * and the private key pair
     * and the balance
     */
    constructor() {
        this.balance = INITIAL_BALANCE;
        this.keyPair = ChainUtil.genKeyPair();
        this.publicKey = this.keyPair.getPublic().encode('hex');
    }

    toString() {
        return `Wallet - 
        publicKey: ${this.publicKey.toString()}
        balance  : ${this.balance}`
    }

    sign(dataHash) {
        return this.keyPair.sign(dataHash);
    }

    /**
     * combines the functionality to create a new RT
     * update a RT into one and also update the RT
     * pool if the RT exists already.
     */

    createRT(report, transaction, blockchain, rtPool) {


        let rt = rtPool.existingRT(this.publicKey);

        this.calculateBalance(blockchain);

        if (rt) {
            // creates more outputs
            if (transaction && transaction.amount) {
                this.balance = this.balance;
                if (transaction.amount > this.balance) {
                    console.log(`Amount: ${transaction.amount} exceeds the current balance: ${this.balance}`);
                    return;
                }
                rt.updateTransactions(this, transaction.address, transaction.amount);
            }
            // edit report data
            if (report)
                rt.updateReport(this, rt.report);
        } else {
            // creates a new transaction and updates the transaction pool
            rt = RT.newRT(this, report, transaction);
            if (rt)
                rtPool.updateOrAddRT(rt);
        }

        return rt;

    }

    /**
     * updates the balance of the wallet
     * based on the latest transaction
     */

    calculateBalance(blockchain) {

        // store the existing balance
        let balance = this.balance;

        // create an array of transactions
        let rTs = [];

        // store all the transactions in the array
        blockchain.chain.forEach(block => block.data.forEach(rt => {
            rTs.push(rt);
        }));

        // get all the RTs generated by the wallet ie money sent by the wallet
        const userCreatedRTs = rTs.filter(rt => rt.userAddress === this.publicKey);

        // declare a variable to save the timestamp
        let startTime = 0;

        if (userCreatedRTs.length > 0) {

            // get the latest RT
            const recentCreatedRT = userCreatedRTs.reduce((prev, current) => prev.timestamp > current.timestamp ? prev : current);

            // get the outputs of that transactions, its amount will be the money that we would get back
            balance = recentCreatedRT.transactions.find(output => output.address === this.publicKey).amount;

            // save the timestamp of the latest transaction made by the wallet
            startTime = recentCreatedRT.timestamp
        }

        // If user send report calculate reward and punishment by reading verdict property
        // get the RT.transaction that were addressed to this wallet ie somebody sent some money
        // and add its transactions.
        // since we save the timestamp we would only add the outputs of the transactions received
        // only after the latest transactions made by us

        rTs.forEach(rt => {
            if (rt.timestamp > startTime) {
                //Get verdict
                if (rt.userAddress === this.publicKey && rt.report) {
                    balance += rt.report.verdict
                }
                //Someone send money
                rt.transactions.find(transaction => {
                    if (transaction.address === this.publicKey) {
                        balance += transaction.amount;
                    }
                })
            }
        });
        this.balance = balance;
        return balance;

    }

    static calculateBalanceWithAddress(blockchain, userAddress) {
        // store the existing balance
        let balance = INITIAL_BALANCE;

        // create an array of transactions
        let rTs = [];

        // store all the transactions in the array
        blockchain.chain.forEach(block => block.data.forEach(rt => {
            rTs.push(rt);
        }));

        // get all the RTs generated by the wallet ie money sent by the wallet AND also check this RT have transactions
        // or it is just a REPORT
        const userCreatedRTs = rTs.filter(rt => (rt.userAddress === userAddress && rt.transactions.length > 0));

        let userMiningRewardRTs = [];
        let userRealRTs = [];

        userCreatedRTs.forEach(rt => {
            if (rt.transactions.length === 1 && rt.transactions[0].address === userAddress) {
                userMiningRewardRTs.push(rt);
            } else {
                userRealRTs.push(rt);
            }
        });

        // declare a variable to save the timestamp
        let startTime = 0;

        if (userRealRTs.length > 0) {


            // get the latest RT
            const recentCreatedRT = userRealRTs.reduce((prev, current) => prev.timestamp > current.timestamp ? prev : current);

            // get the outputs of that transactions, its amount will be the money that we would get back
            balance = recentCreatedRT.transactions.find(output => output.address === userAddress).amount;

            // save the timestamp of the latest transaction made by the wallet
            startTime = recentCreatedRT.timestamp
        }

        // If user send report calculate reward and punishment by reading verdict property
        // get the RT.transaction that were addressed to this wallet ie somebody sent some money
        // and add its transactions.
        // since we save the timestamp we would only add the outputs of the transactions received
        // only after the latest transactions made by us

        rTs.forEach(rt => {
            if (rt.timestamp > startTime) {


                //Get verdict
                if (rt.userAddress === userAddress && rt.report && rt.report.verdict) {
                    balance += rt.report.verdict
                }
                //Someone send money or mining reward
                rt.transactions.find(transaction => {
                    if (transaction.address === userAddress) {
                        balance += transaction.amount;
                    }
                })
            }
        });
        return balance;
    }

    static blockchainWallet() {
        const blockchainWallet = new this();
        blockchainWallet.address = 'blockchain-wallet';
        return blockchainWallet;
    }
}

module.exports = Wallet;
